---
title: "Phi"
format: html
editor: visual
---

# Función Característica

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(viridisLite)
library(parallel)

set.seed(123)
```

```{r}
n <- 500 #tamaño de la muestra
t_vals <- seq(-5, 5, length.out = 200) #valores de t para la FC

# Función característica empírica - FCE
phi_empirica <- function(t, x) {
  sapply(t, function(ti) {
    mean(exp(1i * ti * x))
  })
}

```

```{r}
#Crear dataframe para los plots

crear_df <- function(t_vals, muestra){
# Calcular valores
phi_teo_vals <- phi_teorica(t_vals) 
phi_emp_vals <- phi_empirica(t_vals, muestra)

# Crear df en formato largo 
df_complex <- data.frame(
  t = rep(t_vals, 2),
  Re = c(Re(phi_teo_vals), Re(phi_emp_vals)),
  Im = c(Im(phi_teo_vals), Im(phi_emp_vals)),
  Tipo = factor(rep(c("Teórica", "Empírica"), each = length(t_vals)))
)

return(df_complex)
}
```

# Mezcla de Normales

```{r}
# Mezcla: 0.7 * N(0,1) + 0.3 * N(2,4)
componentes <- sample(c(1, 2), size = n, replace = TRUE, prob = c(0.7, 0.3))

# Generar muestras // sd = sqrt(4)
muestra <- numeric(n)
muestra[componentes == 1] <- rnorm(sum(componentes == 1), mean = 0, sd = 1)
muestra[componentes == 2] <- rnorm(sum(componentes == 2), mean = 2, sd = 2)


# Función característica teórica de la mezcla
phi_teorica <- function(t) {
  phi1 <- function(t) exp(-0.5 * t^2)                   # N(0,1)
  phi2 <- function(t) exp(1i * 2 * t - 0.5 * 4 * t^2)   # N(2,4)
  0.7 * phi1(t) + 0.3 * phi2(t)
} 

```

## Distribución Acumulada Teórica vs Empírica

```{r}
# Función de distribución teórica (CDF)
cdf <- function(x) {
  0.7 * pnorm(x, mean = 0, sd = 1) + 0.3 * pnorm(x, mean = 2, sd = 2)
} 

# Función de distribución empírica (ECDF)
ecdf_emp <- ecdf(muestra)

#Valores de x (evaluar las funciones)
x_vals <- seq(min(muestra) - 1, max(muestra) + 1, length.out = 300)

y_teo <- cdf(x_vals)
y_emp <- ecdf_emp(x_vals)

plot_base <- ggplot() +  
  scale_color_manual(values = c("Teórica" = "red", "Empírica" = "blue")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme_minimal() + guides(linetype = "none") + 
  theme(plot.title = element_text(hjust = 0.5, size = 13),legend.title = element_blank())

acummez <- plot_base + 
  geom_line(aes(x = x_vals, y = y_teo,
                color = "Teórica", linetype = "Teórica"), size = 1) +
  geom_line(aes(x = x_vals, y = y_emp,
                color = "Empírica", linetype = "Empírica"), size = 1) +  
  labs(title = "Función de Distribución Teórica vs Empírica", x = "x", 
       y = "F(x)", color = "Función") +
  theme(legend.position = c(0.9, 0.1))

acummez

#ggsave("MezclaAcumulada2.pdf", acummez, width = 6, height = 4)
```

## Densidad Teórica vs Empírica

```{r}

# Densidad teórica de la mezcla
densidad_teorica <- function(x) {
  0.7 * dnorm(x, mean = 0, sd = 1) + 0.3 * dnorm(x, mean = 2, sd = 2)
}

# Densidad estimada con density()
densidad_estimada <- density(muestra)

x_vals <- densidad_estimada$x

densidadmez <- plot_base + 
  geom_line(aes(x = x_vals, y = densidad_teorica(x_vals),
                color = "Teórica", linetype = "Teórica"), size = 1) +
  geom_line(aes(x = x_vals, y = densidad_estimada$y,
                color = "Empírica", linetype = "Empírica"), size = 1) +  
  labs(title = "Densidad Teórica vs Empírica", x = "x", y = "Densidad", 
       color = "Función") +
  theme(legend.position = c(0.9, 0.9))

densidadmez
  
#ggsave("MezclaDensidad2.pdf", densidadmez, width = 6, height = 4)
```

## Función Característica: Empírica vs. Teórica

```{r}
data_mezcla <- crear_df(t_vals, muestra) 
```

```{r}
#Plots .data[[y]]

crear_plot <- function(df, y, titulo, color1, color2) {
  
  y_teo <- df[df$Tipo == "Teórica", y]
  y_emp <- df[df$Tipo == "Empírica", y]
  t <- df[df$Tipo == "Empírica", "t"]

  ggplot() +
   geom_line(aes(x = t, y = y_teo,
                color = "Teórica", linetype = "Teórica"), size = 1) +
   geom_line(aes(x = t, y = y_emp,
                color = "Empírica", linetype = "Empírica"), size = 1) +
    labs(title = titulo, x = "t", y = "Valor") +
    scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
    scale_color_manual(values = c("Teórica" = color1, "Empírica" = color2)) +
  theme_minimal() + guides(linetype = "none") +
  theme(legend.title = element_blank(), legend.position = c(0.9, 0.9), 
        plot.title = element_text(hjust = 0.5, size = 13))
}
```

## Parte Real

```{r}

p_real <- crear_plot(data_mezcla, "Re","Función Característica: Parte Real", "red", "blue")

p_real
#ggsave("parte_real2.pdf", p_real, width = 6, height = 4)

```

## Parte Imaginaria

```{r}
p_imag <- crear_plot(data_mezcla, "Im", "Función Característica: Parte Imaginaria", "red", "blue")

p_imag

#ggsave("parte_imag2.pdf", p_imag, width = 6, height = 4)
```

## Plano Complejo

```{r}

crear_plot_complex_t <- function(df, titulo) {
  ggplot(df) +
    geom_path(data = subset(df, Tipo == "Teórica"),
      aes(x = Re, y = Im, color = t, linetype = Tipo),size = 0.8) +
    geom_path(data = subset(df, Tipo == "Empírica"),
              aes(x = Re, y = Im, linetype = Tipo),color = "black", size = 0.8) +
    scale_color_viridis_c(option = "plasma") +
    scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
    labs(title = titulo, x = "Parte Real", y = "Parte Imaginaria",
      color = "Valor de t",linetype = "") +
    coord_fixed() +
    theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5, size = 13))
}

p_comp <- crear_plot_complex_t(data_mezcla,"Función Característica en el Plano Complejo") +
  xlim(-0.1, 1.1) +
  ylim(-0.25, 0.25) 
  #xlim(-0.05, 1.05) +
  #ylim(-0.2, 0.2) 

p_comp

#ggsave(filename = "MezclaNormalComp.pdf", plot = p_comp, width = 11.69, 
       #height = 5,units = "in",dpi = 300)
```

# EXTRA: Función Característica de otras distribuciones

```{r}
crear_plot_complex <- function(df, titulo){
   ggplot(df, aes(x = Re, y = Im, color = Tipo, linetype = Tipo)) +
  geom_path(size = 0.8) +
  labs(title = titulo, x = "Parte Real", y = "Parte Imaginaria") +
  coord_fixed() +  
  theme_minimal() +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme(legend.title = element_blank())
}
```

```{r}
###### EXPONENCIAL ######
# Parámetro
lambda <- 1

# Generar muestra
muestra <- rexp(n, rate = lambda)

# Función característica teórica
phi_teorica <- function(t) {
  lambda / (lambda - 1i * t)
}

data_exp <- crear_df(t_vals, muestra)

#Parte real
data_exp |> crear_plot(y = "Re", 
            "Función Característica (Exponencial): Parte Real",  "red", "blue") 
#Parte Im
data_exp |> crear_plot(y = "Im", 
        "Función Característica (Exponencial): Parte Imaginaria",  "red", "blue") 
    
data_exp |> crear_plot_complex("Función Característica (Exponencial) en el Plano Complejo") + xlim(-0.1, 1.1) + ylim(-0.6, 0.6) 
```

```{r}
###### POISSON ######

# Generar muestra de Poisson
lambda <- 1
muestra <- rpois(n, lambda)

# Función característica teórica de Poisson
phi_teorica <- function(t) {
  exp(lambda * (exp(1i * t) - 1))
}

data_poi <- crear_df(t_vals, muestra)
#Parte real
data_poi |> crear_plot(y = "Re", 
         "Función Característica  (Poisson): Parte Real",  "darkorange", "green") 
#Parte Im
data_poi |> crear_plot(y = "Im", 
    "Función Característica  (Poisson): Parte Imaginaria", "darkorange", "green") 

data_poi |> crear_plot_complex("Función Característica (Poisson) en el Plano Complejo") + xlim(0, 1.1) + ylim(-0.6, 0.6)
```

```{r}
###### NORMAL ######

# Parámetros
mu <- 0
sigma <- 1

# Generar muestra normal
muestra <- rnorm(n, mean = mu, sd = sigma)

# Función característica teórica de la normal
phi_teorica <- function(t) {
  exp(1i * mu * t - 0.5 * sigma^2 * t^2)
}

data_norm <- crear_df(t_vals, muestra)

#Parte real
data_norm |> crear_plot(y = "Re", 
         "Función Característica (Normal): Parte Real", "darkgreen", "brown") 
#Parte Im
data_norm |> crear_plot(y = "Im", 
    "Función Característica (Normal): Parte Imaginaria", "darkgreen", "brown") 
data_norm |> crear_plot_complex("Función Característica (Normal) en el Plano Complejo") + xlim(-0.1, 1.1) + ylim(-0.2, 0.2)

```

```{r}
###### BINOMIAL ######

# Parámetros
size_binom <- 10   # número de ensayos por variable
prob_binom <- 0.3  # probabilidad de éxito

# Generar muestra binomial
muestra <- rbinom(n, size = size_binom, prob = prob_binom)

# Función característica teórica de la Binomial
phi_teorica <- function(t) {
  (1 - prob_binom + prob_binom * exp(1i * t))^size_binom
}

data_bin <- crear_df(t_vals, muestra)

#Parte real
data_bin |> crear_plot(y = "Re", 
         "Función Característica (Binomial): Parte Real", "red", "darkcyan") 
#Parte Im
data_bin |> crear_plot(y = "Im", 
    "Función Característica (Binomial): Parte Imaginaria", "red", "darkcyan") 

data_bin |> crear_plot_complex("Función Característica (Binomial): en el Plano Complejo") + xlim(-1.1, 1.1) + ylim(-1.1, 1.1)
```
