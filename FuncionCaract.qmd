---
title: "P1 Funcion caracteristica"
author: "GM"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see

```{r}
library(tidyverse)
library(viridisLite)

################################# MAD #################################

set.seed(1234)

# DISTRIBUCION EXPONENCIAL

alpha <- 1 #rate
n <- 200 
simulation <- rexp(n, rate = alpha)

# Función característica teórica
carac_func_exp <- function(t, alpha){
  alpha/(alpha - t*1i)
}

# Función característica empírica
carac_func_emp <- function(t, data){
  exp(1i*t*data) |> sum()/length(data)   #o hacer con mean()
}
  
#exp((1i)*1*simulation) |> sum()/n

#Valores de t
val_t <- seq(0, 100, by = 0.1) #probar 100 - 0.1

#Teorica
teorica <- sapply(val_t, function(t) carac_func_exp(t, alpha))

df_t <- tibble(
  t = val_t,
  re = Re(teorica),
  im = Im(teorica),
  func = "Teórica"
)

#Empirica
empirica <- sapply(val_t, function(t) carac_func_emp(t, simulation))

df_e <- tibble(
  t = val_t,
  re = Re(empirica),
  im = Im(empirica),
  func = "Empírica"
)

#Juntar
df_juntas <- bind_rows(df_t, df_e)

ggplot(df_juntas, aes(x = re, y = im, color = func)) +
  geom_path(size = 0.8) +
  coord_equal() +
  labs(
    x = "Re(φ(u))",
    y = "Im(φ(u))",
    color = "Función",
    title = "Función característica: exponencial (teórica vs empírica)"
  ) +
  theme_minimal()

ggplot(df_juntas, aes(x = re, y = im, color = t)) +
  geom_path(size = 0.8) +
  scale_color_viridis_c(option = "plasma") +
  coord_equal() +
  labs(
    x = "Re(φ(u))",
    y = "Im(φ(u))",
    color = "u",
    title = "Función característica: exponencial (teórica vs empírica)"
  ) +
  theme_minimal() +
  facet_wrap(~func)



################################# GUS #################################

library(ggplot2)
library(dplyr)
library(tidyr)

###### EXPONENCIAL ######
# Parámetros
lambda <- 1
n <- 200
set.seed(123)

# Generar muestra
muestra <- rexp(n, rate = lambda)

# Valores de t
t_vals <- seq(-10, 10, length.out = 200)

# Función característica teórica
phi_teorica <- function(t) {
  lambda / (lambda - 1i * t)
}

# Función característica empírica
phi_empirica <- function(t, x) {
  sapply(t, function(ti) {
    mean(exp(1i * ti * x))
  })
}

# Calcular valores
phi_teo_vals <- phi_teorica(t_vals)
phi_emp_vals <- phi_empirica(t_vals, muestra)

# Crear data frame en formato largo para ggplot
df_complex <- data.frame(
  t = rep(t_vals, 2),
  Re = c(Re(phi_teo_vals), Re(phi_emp_vals)),
  Im = c(Im(phi_teo_vals), Im(phi_emp_vals)),
  Tipo = factor(rep(c("Teórica", "Empírica"), each = length(t_vals)))
)

# Gráfico de la Parte Real
p_real <- ggplot(df_complex, aes(x = t, y = Re, color = Tipo, linetype = Tipo)) +
  geom_line(size = 0.5) +
  labs(
    title = "Función Característica (Exponencial): Parte Real",
    x = "t",
    y = "Valor"
  ) +
  scale_color_manual(values = c("Teórica" = "blue", "Empírica" = "red")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme_minimal() +
  theme(legend.title = element_blank())

# Gráfico de la Parte Imaginaria
p_imag <- ggplot(df_complex, aes(x = t, y = Im, color = Tipo, linetype = Tipo)) +
  geom_line(size = 0.5) +
  labs(
    title = "Función Característica (Exponencial): Parte Imaginaria",
    x = "t",
    y = "Valor"
  ) +
  scale_color_manual(values = c("Teórica" = "blue", "Empírica" = "red")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme_minimal() +
  theme(legend.title = element_blank())

print(p_real)
print(p_imag)

# Gráfico en el plano complejo
p_comp <- ggplot(df_complex, aes(x = Re, y = Im, color = Tipo, linetype = Tipo)) +
  geom_path(size = 0.5) +
  labs(
    title = "Función Característica (Exponencial) en el Plano Complejo",
    x = "Parte Real",
    y = "Parte Imaginaria"
  ) +
  xlim(-0.1, 1.1) +
  ylim(-0.6, 0.6) +
  coord_fixed() +  # Escala igual en ambos ejes
  theme_minimal() +
  scale_color_manual(values = c("Teórica" = "blue", "Empírica" = "red")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme(legend.title = element_blank())

print(p_comp)



###### POISSON ######

# Generar muestra de Poisson
muestra <- rpois(n, lambda)

# Valores de t
t_vals <- seq(-10, 10, length.out = 200)

# Función característica teórica de Poisson
phi_teorica <- function(t) {
  exp(lambda * (exp(1i * t) - 1))
}

# Función característica empírica
phi_empirica <- function(t, x) {
  sapply(t, function(ti) {
    mean(exp(1i * ti * x))
  })
}

# Calcular valores
phi_teo_vals <- phi_teorica(t_vals)
phi_emp_vals <- phi_empirica(t_vals, muestra)

# Crear data frame para ggplot
df_complex <- data.frame(
  t = rep(t_vals, 2),
  Re = c(Re(phi_teo_vals), Re(phi_emp_vals)),
  Im = c(Im(phi_teo_vals), Im(phi_emp_vals)),
  Tipo = factor(rep(c("Teórica", "Empírica"), each = length(t_vals)))
)

# Gráfico Parte Real
p_real <- ggplot(df_complex, aes(x = t, y = Re, color = Tipo, linetype = Tipo)) +
  geom_line(size = 0.6) +
  labs(
    title = "Función Característica (Poisson): Parte Real",
    x = "t",
    y = "Valor"
  ) +
  scale_color_manual(values = c("Teórica" = "green", "Empírica" = "darkorange")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme_minimal() +
  theme(legend.title = element_blank())

# Gráfico Parte Imaginaria
p_imag <- ggplot(df_complex, aes(x = t, y = Im, color = Tipo, linetype = Tipo)) +
  geom_line(size = 0.6) +
  labs(
    title = "Función Característica (Poisson): Parte Imaginaria",
    x = "t",
    y = "Valor"
  ) +
  scale_color_manual(values = c("Teórica" = "green", "Empírica" = "darkorange")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme_minimal() +
  theme(legend.title = element_blank())

# Mostrar gráficos parte real e imaginaria
print(p_real)
print(p_imag)

# Gráfico en el plano complejo
p_comp <- ggplot(df_complex, aes(x = Re, y = Im, color = Tipo, linetype = Tipo)) +
  geom_path(size = 0.6) +
  labs(
    title = "Función Característica (Poisson) en el Plano Complejo",
    x = "Parte Real",
    y = "Parte Imaginaria"
  ) +
  xlim(0, 1.1) +
  ylim(-0.6, 0.6) +
  coord_fixed() +  # Escala igual en ambos ejes
  theme_minimal() +
  scale_color_manual(values = c("Teórica" = "green", "Empírica" = "darkorange")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme(legend.title = element_blank())

# Mostrar gráfico en plano complejo
print(p_comp)




###### NORMAL ######

# Parámetros
mu <- 0
sigma <- 1
n <- 200
set.seed(123)

# Generar muestra normal
muestra <- rnorm(n, mean = mu, sd = sigma)

# Valores de t
t_vals <- seq(-10, 10, length.out = 200)

# Función característica teórica de la normal
phi_teorica <- function(t) {
  exp(1i * mu * t - 0.5 * sigma^2 * t^2)
}

# Función característica empírica
phi_empirica <- function(t, x) {
  sapply(t, function(ti) {
    mean(exp(1i * ti * x))
  })
}

# Calcular valores
phi_teo_vals <- phi_teorica(t_vals)
phi_emp_vals <- phi_empirica(t_vals, muestra)

# Crear data frame para ggplot
df_complex <- data.frame(
  t = rep(t_vals, 2),
  Re = c(Re(phi_teo_vals), Re(phi_emp_vals)),
  Im = c(Im(phi_teo_vals), Im(phi_emp_vals)),
  Tipo = factor(rep(c("Teórica", "Empírica"), each = length(t_vals)))
)

# Gráfico Parte Real
p_real <- ggplot(df_complex, aes(x = t, y = Re, color = Tipo, linetype = Tipo)) +
  geom_line(size = 0.6) +
  labs(
    title = "Función Característica (Normal): Parte Real",
    x = "t",
    y = "Valor"
  ) +
  scale_color_manual(values = c("Teórica" = "darkgreen", "Empírica" = "brown")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme_minimal() +
  theme(legend.title = element_blank())

# Gráfico Parte Imaginaria
p_imag <- ggplot(df_complex, aes(x = t, y = Im, color = Tipo, linetype = Tipo)) +
  geom_line(size = 0.6) +
  labs(
    title = "Función Característica (Normal): Parte Imaginaria",
    x = "t",
    y = "Valor"
  ) +
  scale_color_manual(values = c("Teórica" = "darkgreen", "Empírica" = "brown")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme_minimal() +
  theme(legend.title = element_blank())

# Mostrar gráficos parte real e imaginaria
print(p_real)
print(p_imag)

# Gráfico en el plano complejo
p_comp <- ggplot(df_complex, aes(x = Re, y = Im, color = Tipo, linetype = Tipo)) +
  geom_path(size = 0.6) +
  labs(
    title = "Función Característica (Normal) en el Plano Complejo",
    x = "Parte Real",
    y = "Parte Imaginaria"
  ) +
  xlim(-0.1, 1.1) +
  ylim(-0.2, 0.2) +
  coord_fixed() +  # Escala igual en ambos ejes
  theme_minimal() +
  scale_color_manual(values = c("Teórica" = "darkgreen", "Empírica" = "brown")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme(legend.title = element_blank())

# Mostrar gráfico en plano complejo
print(p_comp)




###### MEZCLA DE NORMALES ######

# Parámetros
n <- 200
set.seed(123)

# Mezcla: 0.7 * N(0,1) + 0.3 * N(2,4)
componentes <- sample(c(1, 2), size = n, replace = TRUE, prob = c(0.7, 0.3))

# Generar muestras
muestra <- numeric(n)
muestra[componentes == 1] <- rnorm(sum(componentes == 1), mean = 0, sd = 1)
muestra[componentes == 2] <- rnorm(sum(componentes == 2), mean = 2, sd = 2)  # sd = sqrt(4)

# Valores de t
t_vals <- seq(-10, 10, length.out = 200)

# Función característica teórica de la mezcla
phi_teorica <- function(t) {
  phi1 <- function(t) exp(-0.5 * t^2)                   # N(0,1)
  phi2 <- function(t) exp(1i * 2 * t - 0.5 * 4 * t^2)   # N(2,4)
  0.7 * phi1(t) + 0.3 * phi2(t)
}

# Función característica empírica
phi_empirica <- function(t, x) {
  sapply(t, function(ti) {
    mean(exp(1i * ti * x))
  })
}

# Calcular valores
phi_teo_vals <- phi_teorica(t_vals)
phi_emp_vals <- phi_empirica(t_vals, muestra)

# Crear data frame para ggplot
df_complex <- data.frame(
  t = rep(t_vals, 2),
  Re = c(Re(phi_teo_vals), Re(phi_emp_vals)),
  Im = c(Im(phi_teo_vals), Im(phi_emp_vals)),
  Tipo = factor(rep(c("Teórica", "Empírica"), each = length(t_vals)))
)

# Gráfico Parte Real
p_real <- ggplot(df_complex, aes(x = t, y = Re, color = Tipo, linetype = Tipo)) +
  geom_line(size = 0.6) +
  labs(
    title = "Función Característica (Mezcla Normal): Parte Real",
    x = "t",
    y = "Valor"
  ) +
  scale_color_manual(values = c("Teórica" = "blue", "Empírica" = "orange")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme_minimal() +
  theme(legend.title = element_blank())

# Gráfico Parte Imaginaria
p_imag <- ggplot(df_complex, aes(x = t, y = Im, color = Tipo, linetype = Tipo)) +
  geom_line(size = 0.6) +
  labs(
    title = "Función Característica (Mezcla Normal): Parte Imaginaria",
    x = "t",
    y = "Valor"
  ) +
  scale_color_manual(values = c("Teórica" = "blue", "Empírica" = "orange")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme_minimal() +
  theme(legend.title = element_blank())

# Mostrar gráficos parte real e imaginaria
print(p_real)
print(p_imag)

# Gráfico en el plano complejo
p_comp <- ggplot(df_complex, aes(x = Re, y = Im, color = Tipo, linetype = Tipo)) +
  geom_path(size = 0.6) +
  labs(
    title = "Función Característica (Mezcla Normal) en el Plano Complejo",
    x = "Parte Real",
    y = "Parte Imaginaria"
  ) +
  xlim(-0.1, 1.1) +
  ylim(-0.2, 0.2) +
  coord_fixed() +
  theme_minimal() +
  scale_color_manual(values = c("Teórica" = "blue", "Empírica" = "orange")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme(legend.title = element_blank())

# Mostrar gráfico en plano complejo
print(p_comp)





###### BINOMIAL ######

# Parámetros
n <- 200           # tamaño de muestra
size_binom <- 10   # número de ensayos por variable
prob_binom <- 0.3  # probabilidad de éxito
set.seed(123)

###### BINOMIAL ######

# Generar muestra binomial
muestra <- rbinom(n, size = size_binom, prob = prob_binom)

# Valores de t
t_vals <- seq(-10, 10, length.out = 200)

# Función característica teórica de la Binomial
phi_teorica <- function(t) {
  (1 - prob_binom + prob_binom * exp(1i * t))^size_binom
}

# Función característica empírica
phi_empirica <- function(t, x) {
  sapply(t, function(ti) {
    mean(exp(1i * ti * x))
  })
}

# Calcular valores
phi_teo_vals <- phi_teorica(t_vals)
phi_emp_vals <- phi_empirica(t_vals, muestra)

# Crear data frame para ggplot
df_complex <- data.frame(
  t = rep(t_vals, 2),
  Re = c(Re(phi_teo_vals), Re(phi_emp_vals)),
  Im = c(Im(phi_teo_vals), Im(phi_emp_vals)),
  Tipo = factor(rep(c("Teórica", "Empírica"), each = length(t_vals)))
)

# Gráfico Parte Real
p_real <- ggplot(df_complex, aes(x = t, y = Re, color = Tipo, linetype = Tipo)) +
  geom_line(size = 0.6) +
  labs(
    title = "Función Característica (Binomial): Parte Real",
    x = "t",
    y = "Valor"
  ) +
  scale_color_manual(values = c("Teórica" = "darkcyan", "Empírica" = "red")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme_minimal() +
  theme(legend.title = element_blank())

# Gráfico Parte Imaginaria
p_imag <- ggplot(df_complex, aes(x = t, y = Im, color = Tipo, linetype = Tipo)) +
  geom_line(size = 0.6) +
  labs(
    title = "Función Característica (Binomial): Parte Imaginaria",
    x = "t",
    y = "Valor"
  ) +
  scale_color_manual(values = c("Teórica" = "darkcyan", "Empírica" = "red")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme_minimal() +
  theme(legend.title = element_blank())

# Mostrar gráficos parte real e imaginaria
print(p_real)
print(p_imag)

# Gráfico en el plano complejo
p_comp <- ggplot(df_complex, aes(x = Re, y = Im, color = Tipo, linetype = Tipo)) +
  geom_path(size = 0.6) +
  labs(
    title = "Función Característica (Binomial) en el Plano Complejo",
    x = "Parte Real",
    y = "Parte Imaginaria"
  ) +
  xlim(-1.1, 1.1) +
  ylim(-1.1, 1.1) +
  coord_fixed() +  # Escala igual en ambos ejes
  theme_minimal() +
  scale_color_manual(values = c("Teórica" = "darkcyan", "Empírica" = "red")) +
  scale_linetype_manual(values = c("Teórica" = "solid", "Empírica" = "dashed")) +
  theme(legend.title = element_blank())

# Mostrar gráfico en plano complejo
print(p_comp)

```
